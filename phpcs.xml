<?xml version="1.0"?>
<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="Aquelarre" xsi:noNamespaceSchemaLocation="phpcs.xsd">

    <description>Aquelarre PHPCS Config</description>

    <config name="installed_paths" value="../../slevomat/coding-standard"/><!-- relative path from PHPCS source location -->

    <file>./app</file>
    <file>./config</file>
    <file>./routes</file>
    <file>./tests</file>

    <arg name="basepath" value="."/>
    <arg name="colors"/>
    <arg name="parallel" value="75"/>
    <arg value="np"/>

    <!-- Don't hide tokenizer exceptions -->
    <rule ref="Internal.Tokenizer.Exception">
        <type>error</type>
    </rule>

    <!-- Include the whole PEAR standard EXCEPT commenting rules -->
    <rule ref="PEAR.Classes" />
    <rule ref="PEAR.ControlStructures" />
    <rule ref="PEAR.Files" />
    <rule ref="PEAR.Formatting" />
    <!--rule ref="PEAR.Functions" /-->
    <rule ref="PEAR.WhiteSpace" />

    <!-- Include some PSR rules -->
    <rule ref="PSR1.Files.SideEffects" />
    <rule ref="PSR2.Classes.ClassDeclaration" />
    <rule ref="PSR2.Classes.PropertyDeclaration"/>
    <!-- Private properties MUST not be prefixed with an underscore -->
    <!--rule ref="PSR2.Classes.PropertyDeclaration.Underscore">
        <severity>0</severity>
    </rule-->
    <rule ref="PSR2.ControlStructures.ElseIfDeclaration" />
    <rule ref="PSR2.Files.ClosingTag" />
    <rule ref="PSR2.Files.EndFileNewline" />
    <rule ref="PSR2.Methods.FunctionClosingBrace" />
    <rule ref="PSR2.Methods.MethodDeclaration"/>
    <!-- Private methods MUST not be prefixed with an underscore -->
    <rule ref="PSR2.Methods.MethodDeclaration.Underscore">
        <severity>0</severity>
    </rule>
    <rule ref="PSR12.Classes.ClassInstantiation" />
    <rule ref="PSR12.Functions.NullableTypeDeclaration" />
    <rule ref="PSR12.Functions.ReturnTypeDeclaration" />
    <rule ref="PSR12.Keywords.ShortFormTypeKeywords" />
    <rule ref="PSR12.Properties.ConstantVisibility" />

    <!-- Include some sniffs from other standards that don't conflict with PEAR -->
    <rule ref="Squiz.Arrays.ArrayBracketSpacing"/>
    <rule ref="Squiz.Arrays.ArrayDeclaration">
        <exclude name="Squiz.Arrays.ArrayDeclaration.DoubleArrowNotAligned"/>
        <exclude name="Squiz.Arrays.ArrayDeclaration.KeyNotAligned"/>
        <exclude name="Squiz.Arrays.ArrayDeclaration.ValueNotAligned"/>
    </rule>
    <rule ref="Squiz.ControlStructures.ControlSignature"/>
    <rule ref="Squiz.ControlStructures.ElseIfDeclaration"/>
    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
        <properties>
            <property name="equalsSpacing" value="1" />
        </properties>
    </rule>
    <rule ref="Squiz.Operators.ValidLogicalOperators" />
    <rule ref="Squiz.Scope.MethodScope"/>
    <rule ref="Squiz.Strings.ConcatenationSpacing">
        <properties>
            <property name="spacing" value="1" />
            <property name="ignoreNewLines" value="true" />
        </properties>
    </rule>
    <rule ref="Squiz.WhiteSpace.ControlStructureSpacing"/>
    <rule ref="Squiz.WhiteSpace.FunctionSpacing">
        <properties>
            <property name="spacing" value="1" />
            <property name="spacingBeforeFirst" value="0" />
            <property name="spacingAfterLast" value="0" />
        </properties>
    </rule>
    <rule ref="Squiz.WhiteSpace.MemberVarSpacing">
        <exclude name="Squiz.WhiteSpace.MemberVarSpacing.FirstIncorrect" />
    </rule>
    <rule ref="Squiz.WhiteSpace.OperatorSpacing"/>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace"/>
    <rule ref="Generic.Arrays.DisallowLongArraySyntax"/>
    <rule ref="Generic.Commenting.Todo"/>
    <rule ref="Generic.ControlStructures.DisallowYodaConditions"/>
    <rule ref="Generic.ControlStructures.InlineControlStructure"/>
    <rule ref="Generic.Formatting.DisallowMultipleStatements"/>
    <rule ref="Generic.NamingConventions.ConstructorName"/>
    <rule ref="Generic.PHP.DeprecatedFunctions"/>
    <rule ref="Generic.PHP.LowerCaseKeyword"/>
    <rule ref="Generic.Strings.UnnecessaryStringConcat"/>
    <rule ref="Generic.WhiteSpace.IncrementDecrementSpacing"/>

    <!-- PEAR uses warnings for inline control structures, so switch back to errors -->
    <rule ref="Generic.ControlStructures.InlineControlStructure">
        <properties>
            <property name="error" value="true"/>
        </properties>
    </rule>

    <!-- We use custom indent rules for arrays -->
    <rule ref="Generic.Arrays.ArrayIndent"/>
    <rule ref="Squiz.Arrays.ArrayDeclaration.KeyNotAligned">
        <severity>0</severity>
    </rule>
<!--    <rule ref="Squiz.Arrays.ArrayDeclaration.ValueNotAligned">-->
<!--        <severity>0</severity>-->
<!--    </rule>-->
    <rule ref="Squiz.Arrays.ArrayDeclaration.CloseBraceNotAligned">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.Arrays.ArrayDeclaration.CloseBraceNewLine">
        <severity>0</severity>
    </rule>

    <!-- Check var names, but we don't want leading underscores for private vars -->
    <rule ref="Squiz.NamingConventions.ValidVariableName"/>
    <rule ref="Squiz.NamingConventions.ValidVariableName.PrivateNoUnderscore">
        <severity>0</severity>
    </rule>

    <!-- Ban some functions -->
    <rule ref="Generic.PHP.ForbiddenFunctions">
        <properties>
            <property name="forbiddenFunctions" type="array">
                <element key="sizeof" value="count"/>
                <element key="delete" value="unset"/>
                <element key="print" value="echo"/>
                <element key="is_null" value="null"/>
                <element key="create_function" value="null"/>
            </property>
        </properties>
    </rule>

    <!-- The testing bootstrap file uses string concats to stop IDEs seeing the class aliases -->
    <rule ref="Generic.Strings.UnnecessaryStringConcat">
        <exclude-pattern>tests/bootstrap.php</exclude-pattern>
    </rule>

    <!-- Lines should not exceed the fixed length -->
    <rule ref="Generic.Files.LineLength">
        <properties>
            <property name="lineLimit" value="160"/>
            <property name="absoluteLineLimit" value="0"/>
        </properties>
    </rule>

    <!-- Fixme and TODO comments are not allowed -->
    <rule ref="Generic.Commenting.Fixme"/>
    <rule ref="Generic.Commenting.Todo"/>

    <!-- Typehits are preferred over docblocks in parameter lists-->
    <!-- When overriding native methods, add @phpcsSuppress SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingNativeTypeHint -->
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHint" />

    <!-- Typehints are preferred over docblocks in properties -->
    <!-- When overriding native methods, add @phpcsSuppress SlevomatCodingStandard.TypeHints.PropertyTypeHint.MissingNativeTypeHint -->
    <rule ref="SlevomatCodingStandard.TypeHints.PropertyTypeHint" />

    <!-- Typehints are preferred over docblocks in returns -->
    <!-- When overriding native methods, add @phpcsSuppress SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingNativeTypeHint -->
    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHint" />

    <!-- Constants MUST not have a docblock -->
    <rule ref="SlevomatCodingStandard.TypeHints.UselessConstantTypeHint" />

    <!-- Throwable interface over Exception in throws -->
    <rule ref="SlevomatCodingStandard.Exceptions.ReferenceThrowableOnly" />

    <!-- Force strict types -->
    <rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes">
        <properties>
            <property name="newlinesCountBetweenOpenTagAndDeclare" value="1" />
            <property name="newlinesCountAfterDeclare" value="1" />
            <property name="spacesCountAroundEqualsSign" value="0" />
        </properties>
    </rule>

    <!-- Disallows assignments in if, elseif and do-while loop conditions -->
    <rule ref="SlevomatCodingStandard.ControlStructures.AssignmentInCondition" />

    <!-- Requires use of null coalesce operator when possible -->
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireNullCoalesceOperator" />

    <!-- Requires use of early exit -->
    <rule ref="SlevomatCodingStandard.ControlStructures.EarlyExit">
        <properties>
            <property name="ignoreStandaloneIfInScope" value="true" />
            <property name="ignoreOneLineTrailingIf" value="true" />
            <property name="ignoreTrailingIfWithOneInstruction" value="true" />
        </properties>
    </rule>

    <!-- Reports closures not using $this that are not declared static -->
    <rule ref="SlevomatCodingStandard.Functions.StaticClosure" />

    <!-- Disallows using loose == and != comparison operators -->
    <rule ref="SlevomatCodingStandard.Operators.DisallowEqualOperators" />

    <!-- Looks for unused inherited variables passed to closure via -->
    <rule ref="SlevomatCodingStandard.Functions.UnusedInheritedVariablePassedToClosure" />

    <!-- Looks for unused parameters -->
    <rule ref="SlevomatCodingStandard.Functions.UnusedParameter" />

    <!-- Looks for useless parameter default value -->
    <rule ref="SlevomatCodingStandard.Functions.UselessParameterDefaultValue" />

    <!-- Looks for unused imports from other namespaces -->
    <rule ref="SlevomatCodingStandard.Namespaces.UnusedUses" />

    <!-- Looks for use alias that is same as unqualified name -->
    <rule ref="SlevomatCodingStandard.Namespaces.UselessAlias" />

    <!-- Looks for useless parentheses -->
    <rule ref="SlevomatCodingStandard.PHP.UselessParentheses">
        <properties>
            <property name="ignoreComplexTernaryConditions" value="true" />
        </properties>
    </rule>

    <!-- Looks for useless semicolons -->
    <rule ref="SlevomatCodingStandard.PHP.UselessSemicolon" />

    <!-- Looks for unused variables -->
    <rule ref="SlevomatCodingStandard.Variables.UnusedVariable">
        <properties>
            <property name="ignoreUnusedValuesWhenOnlyKeysAreUsedInForeach" value="true" />
        </properties>
    </rule>

    <!-- Looks for useless variables -->
    <rule ref="SlevomatCodingStandard.Variables.UselessVariable" />

    <!-- Enforces trailing commas in multi-line arrays and requires short array syntax [] -->
    <rule ref="SlevomatCodingStandard.Arrays.TrailingArrayComma" />

</ruleset>
